NumericVector oos_equity_premium,
NumericMatrix oos_forecast_tvp,
NumericMatrix oos_variance_tvp,
NumericMatrix oos_theta_tvp,
IntegerVector idx_sub,
IntegerVector idx_pred,
int t) {
// Define Variables
List ret(4);
double mu_agg, variance_agg, ln_score;
// Subset Matrices (I)
NumericVector oos_forecast_tvp_sub = matrix_subset_idx(oos_forecast_tvp, idx_sub, t);
NumericVector oos_variance_tvp_sub = matrix_subset_idx(oos_variance_tvp, idx_sub, t);
// Calculate Combined Predictive Density
variance_agg = 1 / sum(active_weights / oos_variance_tvp_sub);
mu_agg = sum(active_weights * oos_forecast_tvp_sub / oos_variance_tvp_sub) * variance_agg;
// Calculate Predictive Log Score
ln_score = R::dnorm(oos_equity_premium(t), mu_agg, pow( variance_agg, 0.5 ), true );
// ################
// Define Variables
int           n_var  =  idx_pred.length();
NumericVector v(n_var, 1);
double        weight =  1.0 / idx_sub.length();
//NumericVector oos_theta_tvp_sub    = matrix_subset_idx(oos_theta_tvp, idx_sub, t);
//theta_agg = sum(active_weights * oos_theta_tvp_sub    / oos_variance_tvp_sub) * variance_agg;
// Subset Matrices (II)
NumericVector oos_forecast_tvp_pred  =  matrix_subset_idx(oos_forecast_tvp, idx_pred, t);
NumericVector oos_variance_tvp_pred  =  matrix_subset_idx(oos_variance_tvp, idx_pred, t);
NumericVector oos_theta_tvp_pred     =  matrix_subset_idx(oos_theta_tvp,    idx_pred, t);
// Check whether the Predictor is in the Active Set
NumericVector active_weight_pred(n_var);
for(int i = 0; i < n_var; ++i) {
if( std::find(idx_sub.begin(), idx_sub.end(), idx_pred(i)) != idx_sub.end() )
active_weight_pred[i] = weight;
else
active_weight_pred[i] = 0.0;
}
// Calculate Aggregated Theta for one Predictor
double variance_pred  =  1 / ((1 / n_var) *  sum(v / oos_variance_tvp_pred));
double theta_pred     =  sum(oos_theta_tvp_pred / oos_variance_tvp_pred) * variance_pred * (1 / n_var);
// Calculate Weight for Aggregated Theta for one Predictor
double theta_weight  =  sum(active_weight_pred / oos_variance_tvp_pred) * variance_agg;
double theta_agg     =  theta_pred  *  theta_weight;
// ################
// Fill list
ret[0] = mu_agg;
ret[1] = variance_agg;
ret[2] = ln_score;
ret[3] = theta_agg;
// Return list
return ret;
}"
Rcpp::sourceCpp(code = src)
src <-
"#include <Rcpp.h>
using namespace Rcpp;
NumericVector matrix_subset_idx(NumericMatrix mat,
IntegerVector col_idx,
int t) {
// Determine Number of Columns
int n_cols_out = col_idx.size();
// Create Output Vector
NumericVector out(n_cols_out);
// Loop through each column and copy data
for(int i = 0; i < n_cols_out; ++i) {
out(i) = mat(t, col_idx[i]);
}
return out;
}
// [[Rcpp::export]]
List agg_density_dsc_t(NumericVector active_weights,
NumericVector oos_equity_premium,
NumericMatrix oos_forecast_tvp,
NumericMatrix oos_variance_tvp,
NumericMatrix oos_theta_tvp,
IntegerVector idx_sub,
IntegerVector idx_pred,
int t) {
// Define Variables
List ret(4);
double mu_agg, variance_agg, ln_score;
// Subset Matrices (I)
NumericVector oos_forecast_tvp_sub = matrix_subset_idx(oos_forecast_tvp, idx_sub, t);
NumericVector oos_variance_tvp_sub = matrix_subset_idx(oos_variance_tvp, idx_sub, t);
// Calculate Combined Predictive Density
variance_agg = 1 / sum(active_weights / oos_variance_tvp_sub);
mu_agg = sum(active_weights * oos_forecast_tvp_sub / oos_variance_tvp_sub) * variance_agg;
// Calculate Predictive Log Score
ln_score = R::dnorm(oos_equity_premium(t), mu_agg, pow( variance_agg, 0.5 ), true );
// ################
// Define Variables
int           n_var  =  idx_pred.length();
NumericVector v(n_var, 1.0);
double        weight =  1.0 / idx_sub.length();
//NumericVector oos_theta_tvp_sub    = matrix_subset_idx(oos_theta_tvp, idx_sub, t);
//theta_agg = sum(active_weights * oos_theta_tvp_sub    / oos_variance_tvp_sub) * variance_agg;
// Subset Matrices (II)
NumericVector oos_forecast_tvp_pred  =  matrix_subset_idx(oos_forecast_tvp, idx_pred, t);
NumericVector oos_variance_tvp_pred  =  matrix_subset_idx(oos_variance_tvp, idx_pred, t);
NumericVector oos_theta_tvp_pred     =  matrix_subset_idx(oos_theta_tvp,    idx_pred, t);
// Check whether the Predictor is in the Active Set
NumericVector active_weight_pred(n_var);
for(int i = 0; i < n_var; ++i) {
if( std::find(idx_sub.begin(), idx_sub.end(), idx_pred(i)) != idx_sub.end() )
active_weight_pred[i] = weight;
else
active_weight_pred[i] = 0.0;
}
// Calculate Aggregated Theta for one Predictor
double variance_pred  =  1 / ((1 / n_var) *  sum(v / oos_variance_tvp_pred));
double theta_pred     =  sum(oos_theta_tvp_pred / oos_variance_tvp_pred) * variance_pred * (1 / n_var);
// Calculate Weight for Aggregated Theta for one Predictor
double theta_weight  =  sum(active_weight_pred / oos_variance_tvp_pred) * variance_agg;
double theta_agg     =  theta_pred  *  theta_weight;
// ################
// Fill list
ret[0] = mu_agg;
ret[1] = variance_agg;
ret[2] = ln_score;
ret[3] = sum(v / oos_variance_tvp_pred);
// Return list
return ret;
}"
Rcpp::sourceCpp(code = src)
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
# Load rcpp functions
Rcpp::sourceCpp("/Users/slehmann/Library/CloudStorage/Dropbox/QUBO/Code/tvc_tvint.cpp")
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
Rcpp::sourceCpp("/Users/slehmann/Library/CloudStorage/Dropbox/QUBO/Code/tvc_tvint.cpp")
library("RcppArmadillo")
Rcpp::sourceCpp("/Users/slehmann/Library/CloudStorage/Dropbox/QUBO/Code/tvc_tvint.cpp")
Rcpp::sourceCpp("/Users/slehmann/Library/CloudStorage/Dropbox/QUBO/Code/tvc_tvint.cpp")
Rcpp::sourceCpp("/Users/slehmann/Library/CloudStorage/Dropbox/QUBO/Code/tvc_tvint.cpp")
Rcpp::sourceCpp("/Users/slehmann/Library/CloudStorage/Dropbox/QUBO/Code/tvc_tvint.cpp")
Rcpp::sourceCpp("/Users/slehmann/Library/CloudStorage/Dropbox/QUBO/Code/tvc_tvint.cpp")
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
sessionInfo()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
install.packages("checkmate")
install.packages("tidyverse")
install.packages("testthat")
install.packages("roll")
install.packages("testthat")
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library("roxygen2")
library("Rcpp")
library("RcppArmadillo")
compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::load_all()
devtools::document()
library(hdflex)
install.packages("checkmate")
install.packages("tidyverse")
install.packages("testthat")
install.packages("roll")
install.packages("testthat")
install.packages("checkmate")
install.packages("checkmate")
install.packages("tidyverse")
install.packages("testthat")
install.packages("roll")
install.packages("testthat")
install.packages("covr")
use_coverage(pkg = ".", type = c("codecov"))
covr::use_coverage(pkg = ".", type = c("codecov"))
library("devtools")
covr::use_coverage(pkg = ".", type = c("codecov"))
use_coverage(pkg = ".", type = c("codecov"))
use_coverage(pkg = "hdflex", type = c("codecov"))
install.packages(c("checkmate", "dplyr", "ggplot2", "glmnet", "jsonlite", "lubridate", "microbenchmark", "Rcpp", "RcppArmadillo", "readxl", "rlang", "rmarkdown", "roxygen2", "testthat", "tibble", "tidyr", "xgboost"))
install.packages("tidyverse")
library(hdflex)
library(hdflex)
library(hdflex)
